#!/bin/bash

###
#   @author: roberto monno, msune
#	@organization: NXW, i2CAT
#	@project: FIBRE FP7, Ofelia FP7
#	@description: pre-install module 
###

#inform user
printHeader "info#" "Using default pre-install-hook module..."

local CAT=`which cat`
local CHMOD=`which chmod`

if [ ! -x /etc/init.d/RoadmAMService ]; then
    print "Building RoadmAMService file..."
    $CAT > /etc/init.d/RoadmAMService <<'EndOFRoadmAMService'
#! /bin/sh
### BEGIN INIT INFO
# Provides:          ROADM AM service manager
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: service manager for Roadm Aggregate Manager
# Description:       ---
### END INIT INFO

# Author: Roberto Monno <r.monno@nextworks.it>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Roadm Aggregate Manager Service"
NAME=RoadmAM
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

VERBOSE="yes"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start -b --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 
    start-stop-daemon --start -b --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
        $DAEMON_ARGS \
        || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    # kill all sub-processes (if exist)
    if [ -f $PIDFILE ]; then
        ids=`cat $PIDFILE`
        pkill -P $ids
        kill $ids
    fi

    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    #reload|force-reload)
        # If do_reload() is not implemented then leave this commented out
        # and leave 'force-reload' as an alias for 'restart'.
        #
        #log_daemon_msg "Reloading $DESC" "$NAME"
        #do_reload
        #log_end_msg $?
        #;;
    restart|force-reload)
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
            case "$?" in
                0|1)
                    do_start
                    case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                    esac
                    ;;
                *)
                    # Failed to stop
                    log_end_msg 1
                    ;;
            esac
            ;;
    *)
        #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

EndOFRoadmAMService

    $CHMOD 755 /etc/init.d/RoadmAMService
fi

local CP=`which cp`
local SED=`which sed`

if [ ! -x /etc/init.d/RoadmAMServiceWorker ]; then
    print "Building RoadmAMServiceWorker file..."

    $CP /etc/init.d/RoadmAMService /etc/init.d/RoadmAMServiceWorker
    $SED -i 's/DESC="Roadm Aggregate Manager Service"/DESC="Roadm Aggregate Manager Worker Service"/' /etc/init.d/RoadmAMServiceWorker
    $SED -i 's/NAME=RoadmAM/NAME=RoadmAMWorker/' /etc/init.d/RoadmAMServiceWorker
    $SED -i 's/DAEMON_ARGS=""/DAEMON_ARGS="--worker"/' /etc/init.d/RoadmAMServiceWorker
    $CHMOD 755 /etc/init.d/RoadmAMServiceWorker
fi

local DEST_DIR=${DESTINATION_DIR:-'../src'}
local CAT=`which cat`
local ENV=`which env`
local READLINK=`which readlink`
local DIRNAME=`which dirname`

if [ ! -x /usr/sbin/RoadmAM ]; then
    local exe_main=`$READLINK -f $DEST_DIR/src/main.py` 
    local exe_dir=`$DIRNAME $exe_main`
    local exe_main_text=`$CAT $exe_main`
    print "Building RoadmAM file with $exe_main..."
    $CAT > /usr/sbin/RoadmAM <<EndOFRoadmAM
#!$ENV python

import sys
sys.path.append("$exe_dir")

$exe_main_text

EndOFRoadmAM

    $CHMOD 755 /usr/sbin/RoadmAM
fi

if [ ! -x /usr/sbin/RoadmAMWorker ]; then
    print "Building RoadmAMWorker file with..."
    $CP /usr/sbin/RoadmAM /usr/sbin/RoadmAMWorker
    $CHMOD 755 /usr/sbin/RoadmAMWorker
fi

#shutdown RoadmAM
print "Stopping Roadm-AM-Service application..."

local SERVICE=`which service`
$SERVICE RoadmAMService stop

print "Roadm-AM-Service application successfully stopped!..."

#shutdown RoadmAM Worker
print "Stopping Roadm-AM-Worker-Service application..."

$SERVICE RoadmAMServiceWorker stop

print "Roadm-AM-Worker-Service application successfully stopped!..."
